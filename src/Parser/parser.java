
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Sep 23 15:59:15 GMT-03:00 2017
//----------------------------------------------------

package Parser;

import Throwables.*;
import AST.*;
import java.util.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Sep 23 15:59:15 GMT-03:00 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\004\000\002\023" +
    "\023\000\002\027\004\000\002\027\002\000\002\026\003" +
    "\000\002\026\003\000\002\024\012\000\002\025\010\000" +
    "\002\017\002\000\002\017\004\000\002\016\005\000\002" +
    "\014\003\000\002\014\002\000\002\015\003\000\002\015" +
    "\004\000\002\013\017\000\002\021\003\000\002\021\002" +
    "\000\002\022\003\000\002\022\005\000\002\020\004\000" +
    "\002\012\005\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\004\004\000\002\004\002\000\002\003" +
    "\006\000\002\003\003\000\002\003\011\000\002\003\007" +
    "\000\002\003\007\000\002\003\011\000\002\003\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\006\000\002\006" +
    "\005\000\002\006\010\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\007\000\002\006\006\000\002\006\004\000\002" +
    "\006\005\000\002\011\003\000\002\007\003\000\002\007" +
    "\002\000\002\010\003\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\004\005\006\001\002\000\004\002\223\001" +
    "\002\000\006\002\ufffd\005\146\001\002\000\004\047\007" +
    "\001\002\000\042\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\042\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\001\002\000" +
    "\004\042\011\001\002\000\004\006\012\001\002\000\004" +
    "\007\013\001\002\000\004\010\014\001\002\000\004\011" +
    "\015\001\002\000\004\037\016\001\002\000\004\012\017" +
    "\001\002\000\004\044\020\001\002\000\004\045\021\001" +
    "\002\000\004\047\007\001\002\000\004\040\023\001\002" +
    "\000\004\042\024\001\002\000\014\015\032\017\031\020" +
    "\027\042\025\047\007\001\002\000\016\015\032\017\031" +
    "\020\027\042\025\043\uffe6\047\007\001\002\000\004\043" +
    "\134\001\002\000\004\037\130\001\002\000\022\004\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\042\uffe4\043\uffe4\047" +
    "\uffe4\001\002\000\004\037\124\001\002\000\004\037\116" +
    "\001\002\000\006\030\035\044\034\001\002\000\022\022" +
    "\040\023\043\024\044\025\037\033\045\037\046\047\007" +
    "\050\036\001\002\000\022\022\040\023\043\024\044\025" +
    "\037\033\045\037\046\047\007\050\036\001\002\000\030" +
    "\027\uffd6\031\uffd6\032\uffd6\034\uffd6\035\uffd6\036\uffd6\040" +
    "\uffd6\041\uffd6\044\uffd6\045\uffd6\046\uffd6\001\002\000\006" +
    "\013\102\047\007\001\002\000\030\027\uffd5\031\uffd5\032" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\040\uffd5\041\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\001\002\000\022\027\053\031\056\032" +
    "\052\034\054\035\057\036\050\041\101\044\055\001\002" +
    "\000\030\027\uffd3\031\uffd3\032\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\040\uffd3\041\uffd3\044\uffd3\045\uffd3\046\uffd3\001\002" +
    "\000\030\027\uffd4\031\uffd4\032\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\040\uffd4\041\uffd4\044\uffd4\045\uffd4\046\uffd4\001\002" +
    "\000\030\027\uffd2\031\uffd2\032\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\040\uffd2\041\uffd2\044\uffd2\045\uffd2\046\uffd2\001\002" +
    "\000\022\022\040\023\043\024\044\025\037\033\045\037" +
    "\046\047\007\050\036\001\002\000\022\022\040\023\043" +
    "\024\044\025\037\033\045\037\046\047\007\050\036\001" +
    "\002\000\022\027\053\031\056\032\052\034\054\035\057" +
    "\036\050\040\051\044\055\001\002\000\006\021\067\047" +
    "\007\001\002\000\030\027\uffce\031\uffce\032\uffce\034\uffce" +
    "\035\uffce\036\uffce\040\uffce\041\uffce\044\uffce\045\uffce\046" +
    "\uffce\001\002\000\022\022\040\023\043\024\044\025\037" +
    "\033\045\037\046\047\007\050\036\001\002\000\022\022" +
    "\040\023\043\024\044\025\037\033\045\037\046\047\007" +
    "\050\036\001\002\000\022\022\040\023\043\024\044\025" +
    "\037\033\045\037\046\047\007\050\036\001\002\000\022" +
    "\022\040\023\043\024\044\025\037\033\045\037\046\047" +
    "\007\050\036\001\002\000\022\022\040\023\043\024\044" +
    "\025\037\033\045\037\046\047\007\050\036\001\002\000" +
    "\022\022\040\023\043\024\044\025\037\033\045\037\046" +
    "\047\007\050\036\001\002\000\030\027\uffdd\031\uffdd\032" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\040\uffdd\041\uffdd\044\uffdd" +
    "\045\uffdd\046\uffdd\001\002\000\030\027\uffdb\031\uffdb\032" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\040\uffdb\041\uffdb\044\uffdb" +
    "\045\uffdb\046\uffdb\001\002\000\022\027\053\031\056\032" +
    "\052\034\054\035\057\036\050\044\055\045\063\001\002" +
    "\000\030\027\uffd9\031\uffd9\032\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\040\uffd9\041\uffd9\044\uffd9\045\uffd9\046\uffd9\001\002" +
    "\000\030\027\uffdc\031\uffdc\032\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\040\uffdc\041\uffdc\044\uffdc\045\uffdc\046\uffdc\001\002" +
    "\000\030\027\uffde\031\uffde\032\uffde\034\uffde\035\uffde\036" +
    "\uffde\040\uffde\041\uffde\044\uffde\045\uffde\046\uffde\001\002" +
    "\000\030\027\uffda\031\uffda\032\uffda\034\uffda\035\uffda\036" +
    "\uffda\040\uffda\041\uffda\044\uffda\045\uffda\046\uffda\001\002" +
    "\000\030\027\uffd8\031\uffd8\032\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\001\002" +
    "\000\004\037\071\001\002\000\024\022\040\023\043\024" +
    "\044\025\037\033\045\037\046\040\uffcb\047\007\050\036" +
    "\001\002\000\006\040\uffcc\046\076\001\002\000\024\027" +
    "\053\031\056\032\052\034\054\035\057\036\050\040\uffca" +
    "\044\055\046\uffca\001\002\000\004\040\075\001\002\000" +
    "\030\027\uffd7\031\uffd7\032\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\040\uffd7\041\uffd7\044\uffd7\045\uffd7\046\uffd7\001\002\000" +
    "\022\022\040\023\043\024\044\025\037\033\045\037\046" +
    "\047\007\050\036\001\002\000\024\027\053\031\056\032" +
    "\052\034\054\035\057\036\050\040\uffc9\044\055\046\uffc9" +
    "\001\002\000\030\027\053\031\056\032\052\034\054\035" +
    "\057\036\050\040\uffcf\041\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\001\002\000\022\004\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\042\uffe5\043\uffe5\047\uffe5\001\002\000\004\044\106" +
    "\001\002\000\004\037\104\001\002\000\004\040\105\001" +
    "\002\000\030\027\uffd0\031\uffd0\032\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\040\uffd0\041\uffd0\044\uffd0\045\uffd0\046\uffd0\001" +
    "\002\000\022\022\040\023\043\024\044\025\037\033\045" +
    "\037\046\047\007\050\036\001\002\000\022\027\053\031" +
    "\056\032\052\034\054\035\057\036\050\044\055\045\110" +
    "\001\002\000\030\027\uffd1\031\uffd1\032\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\040\uffd1\041\uffd1\044\uffd1\045\uffd1\046\uffd1" +
    "\001\002\000\022\027\053\031\056\032\052\034\054\035" +
    "\057\036\050\044\055\045\112\001\002\000\004\030\113" +
    "\001\002\000\022\022\040\023\043\024\044\025\037\033" +
    "\045\037\046\047\007\050\036\001\002\000\022\027\053" +
    "\031\056\032\052\034\054\035\057\036\050\041\115\044" +
    "\055\001\002\000\022\004\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\042\uffe3\043\uffe3\047\uffe3\001\002\000\022\022" +
    "\040\023\043\024\044\025\037\033\045\037\046\047\007" +
    "\050\036\001\002\000\022\027\053\031\056\032\052\034" +
    "\054\035\057\036\050\040\120\044\055\001\002\000\014" +
    "\015\032\017\031\020\027\042\025\047\007\001\002\000" +
    "\004\016\122\001\002\000\014\015\032\017\031\020\027" +
    "\042\025\047\007\001\002\000\022\004\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\042\uffe0\043\uffe0\047\uffe0\001\002" +
    "\000\022\022\040\023\043\024\044\025\037\033\045\037" +
    "\046\047\007\050\036\001\002\000\022\027\053\031\056" +
    "\032\052\034\054\035\057\036\050\040\126\044\055\001" +
    "\002\000\014\015\032\017\031\020\027\042\025\047\007" +
    "\001\002\000\022\004\uffe1\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\042\uffe1\043\uffe1\047\uffe1\001\002\000\022\022\040" +
    "\023\043\024\044\025\037\033\045\037\046\047\007\050" +
    "\036\001\002\000\022\027\053\031\056\032\052\034\054" +
    "\035\057\036\050\040\132\044\055\001\002\000\004\041" +
    "\133\001\002\000\022\004\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\042\uffe2\043\uffe2\047\uffe2\001\002\000\004\043" +
    "\135\001\002\000\006\002\uffff\005\uffff\001\002\000\004" +
    "\043\141\001\002\000\020\004\uffe6\015\032\017\031\020" +
    "\027\042\025\043\uffe6\047\007\001\002\000\006\004\uffe7" +
    "\043\uffe7\001\002\000\022\004\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\042\uffdf\043\uffdf\047\uffdf\001\002\000\004" +
    "\002\001\001\002\000\006\002\ufffd\005\146\001\002\000" +
    "\006\002\ufffb\005\ufffb\001\002\000\006\002\ufffc\005\ufffc" +
    "\001\002\000\004\047\007\001\002\000\006\026\151\042" +
    "\150\001\002\000\014\006\ufff8\013\ufff8\014\ufff8\043\ufff8" +
    "\047\ufff8\001\002\000\004\047\007\001\002\000\004\042" +
    "\153\001\002\000\014\006\ufff8\013\ufff8\014\ufff8\043\ufff8" +
    "\047\ufff8\001\002\000\014\006\157\013\156\014\161\043" +
    "\ufff4\047\007\001\002\000\004\047\007\001\002\000\006" +
    "\044\213\047\uffe9\001\002\000\010\013\156\014\161\047" +
    "\007\001\002\000\006\006\157\043\ufff5\001\002\000\004" +
    "\047\uffea\001\002\000\006\006\ufff3\043\ufff3\001\002\000" +
    "\004\047\uffe8\001\002\000\026\004\ufff7\006\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\017\ufff7\020\ufff7\042\ufff7\043\ufff7\047" +
    "\ufff7\001\002\000\004\043\166\001\002\000\006\002\ufffa" +
    "\005\ufffa\001\002\000\006\006\ufff2\043\ufff2\001\002\000" +
    "\004\047\007\001\002\000\004\037\172\001\002\000\012" +
    "\013\156\014\161\040\uffef\047\007\001\002\000\004\040" +
    "\202\001\002\000\004\047\007\001\002\000\006\040\uffee" +
    "\046\uffee\001\002\000\006\040\ufff0\046\177\001\002\000" +
    "\010\013\156\014\161\047\007\001\002\000\006\040\uffed" +
    "\046\uffed\001\002\000\006\040\uffec\046\uffec\001\002\000" +
    "\004\042\203\001\002\000\022\004\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\017\ufff8\020\ufff8\042\ufff8\047\ufff8\001\002\000" +
    "\022\004\uffe6\013\156\014\161\015\032\017\031\020\027" +
    "\042\025\047\007\001\002\000\004\004\207\001\002\000" +
    "\010\030\035\044\034\047\uffe8\001\002\000\022\022\040" +
    "\023\043\024\044\025\037\033\045\037\046\047\007\050" +
    "\036\001\002\000\022\027\053\031\056\032\052\034\054" +
    "\035\057\036\050\041\211\044\055\001\002\000\004\043" +
    "\212\001\002\000\006\006\ufff1\043\ufff1\001\002\000\004" +
    "\045\214\001\002\000\004\047\uffeb\001\002\000\004\041" +
    "\216\001\002\000\026\004\ufff6\006\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\017\ufff6\020\ufff6\042\ufff6\043\ufff6\047\ufff6\001" +
    "\002\000\014\006\157\013\156\014\161\043\ufff4\047\007" +
    "\001\002\000\004\043\221\001\002\000\006\002\ufff9\005" +
    "\ufff9\001\002\000\004\002\ufffe\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\006\002\003\023\004\001\001\000\002\001" +
    "\001\000\012\024\144\025\143\026\142\027\141\001\001" +
    "\000\004\011\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\025\005" +
    "\027\011\032\001\001\000\012\003\136\004\135\005\027" +
    "\011\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\110\011\041\001\001\000\006\006" +
    "\040\011\041\001\001\000\002\001\001\000\004\011\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\077" +
    "\011\041\001\001\000\006\006\046\011\041\001\001\000" +
    "\002\001\001\000\004\011\067\001\001\000\002\001\001" +
    "\000\006\006\065\011\041\001\001\000\006\006\064\011" +
    "\041\001\001\000\006\006\063\011\041\001\001\000\006" +
    "\006\061\011\041\001\001\000\006\006\060\011\041\001" +
    "\001\000\006\006\057\011\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\072\007\073\010" +
    "\071\011\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\076\011" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\106\011\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\113\011\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\116\011\041\001" +
    "\001\000\002\001\001\000\010\003\120\005\027\011\032" +
    "\001\001\000\002\001\001\000\010\003\122\005\027\011" +
    "\032\001\001\000\002\001\001\000\006\006\124\011\041" +
    "\001\001\000\002\001\001\000\010\003\126\005\027\011" +
    "\032\001\001\000\002\001\001\000\006\006\130\011\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\136\004\137\005\027\011\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\144\025\143\026\142\027\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\146\001\001\000\002" +
    "\001\001\000\004\017\216\001\001\000\004\011\151\001" +
    "\001\000\002\001\001\000\004\017\153\001\001\000\016" +
    "\011\162\012\154\013\161\014\164\015\157\016\163\001" +
    "\001\000\004\011\214\001\001\000\002\001\001\000\006" +
    "\011\162\012\167\001\001\000\004\013\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\170\001\001\000\002\001\001\000\014" +
    "\011\162\012\173\020\174\021\172\022\175\001\001\000" +
    "\002\001\001\000\004\011\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\162\012\173\020\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\203\001\001\000\016\003\136\004\204\005" +
    "\027\011\205\012\154\016\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\207\011\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\011\162\012\154\013\161\014\217\015\157" +
    "\016\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NoEmptyList ::= NoEmptyList COMMA Exp 
            {
              ExpList RESULT =null;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpList exprl = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 exprl.addElement(expr); RESULT = exprl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NoEmptyList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NoEmptyList ::= Exp 
            {
              ExpList RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpList exprl = new ExpList(1);
					   exprl.addElement(expr);
					   RESULT = exprl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NoEmptyList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExpList ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpList ::= NoEmptyList 
            {
              ExpList RESULT =null;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList exprl = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = exprl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(id, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Identifier",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exp ::= LPAREN Exp RPAREN 
            {
              Exp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exp ::= NOT Exp 
            {
              Exp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(expr, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Exp ::= NEW Identifier LPAREN RPAREN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new NewObject(id, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp ::= NEW INTEGER LBRACK Exp RBRACK 
            {
              Exp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NewArray(expr, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp ::= THIS 
            {
              Exp RESULT =null;
		int thleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int thright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object th = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new This(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp ::= Identifier 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierExp(id.s,1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp ::= FALSE 
            {
              Exp RESULT =null;
		int falleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int falright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new False(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp ::= TRUE 
            {
              Exp RESULT =null;
		int truleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int truright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tru = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new True(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp ::= INT 
            {
              Exp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer lit = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerLiteral(lit, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp ::= Exp POINT Identifier LPAREN ExpList RPAREN 
            {
              Exp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Call(expr, id, el, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp ::= Exp POINT LENGTH 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayLength(arg1, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp ::= Exp LBRACK Exp RBRACK 
            {
              Exp RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp expr1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp expr2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayLookup(expr1, expr2, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp ::= Exp AND Exp 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(arg1, arg2, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp ::= Exp LESS Exp 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(arg1, arg2, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp ::= Exp MINUS Exp 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(arg1, arg2, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= Exp TIMES Exp 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Times(arg1, arg2, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp ::= Exp PLUS Exp 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(arg1, arg2, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= LBRACE StatementList RBRACE 
            {
              Statement RESULT =null;
		int stmlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList stml = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(stml, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= IF LPAREN Exp RPAREN Statement ELSE Statement 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement stmt1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmt2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmt2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stmt2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(expr, stmt1, stmt2, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statement ::= WHILE LPAREN Exp RPAREN Statement 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(expr, stmt, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statement ::= SYSOUT LPAREN Exp RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(expr, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= Identifier LBRACK Exp RBRACK BECOMES Exp SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp expr1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp expr2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAssign(id, expr1, expr2, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= ReturnStatement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Return s = (Return)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= Identifier BECOMES Exp SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assign(id, expr, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // StatementList ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // StatementList ::= Statement StatementList 
            {
              StatementList RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList stml = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 stml.addElement(stmt); RESULT = stml; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= Identifier 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i.s, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= INTEGER 
            {
              Type RESULT =null;
		 RESULT = new IntegerType(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= INTEGER LBRACK RBRACK 
            {
              Type RESULT =null;
		 RESULT = new IntArrayType(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Formal ::= Type Identifier 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Formal(t,id, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NoEmptyFormalList ::= NoEmptyFormalList COMMA Formal 
            {
              FormalList RESULT =null;
		int forlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int forlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormalList forl = (FormalList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 forl.addElement(f); RESULT = forl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NoEmptyFormalList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NoEmptyFormalList ::= Formal 
            {
              FormalList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 FormalList forl = new FormalList(1);
						   forl.addElement(f);
						   RESULT = forl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NoEmptyFormalList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FormalList ::= 
            {
              FormalList RESULT =null;
		 RESULT = new FormalList(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FormalList ::= NoEmptyFormalList 
            {
              FormalList RESULT =null;
		int forlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalList forl = (FormalList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = forl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Exp SEMICOLON RBRACE 
            {
              MethodDecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int forlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int forlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		FormalList forl = (FormalList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int varlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int varlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VarDeclList varl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stmlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stmlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		StatementList stml = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new MethodDecl(type, id, forl, varl, stml, expr, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NoEmptyMethodDeclList ::= NoEmptyMethodDeclList MethodDecl 
            {
              MethodDeclList RESULT =null;
		int mthlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mthlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDeclList mthl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mthdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mthdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDecl mthd = (MethodDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 mthl.addElement(mthd); RESULT = mthl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NoEmptyMethodDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NoEmptyMethodDeclList ::= MethodDecl 
            {
              MethodDeclList RESULT =null;
		int mthdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mthdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDecl mthd = (MethodDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 MethodDeclList mthl = new MethodDeclList(1);
							   mthl.addElement(mthd);
							   RESULT = mthl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NoEmptyMethodDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MethodDeclList ::= 
            {
              MethodDeclList RESULT =null;
		 RESULT = new MethodDeclList(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MethodDeclList ::= NoEmptyMethodDeclList 
            {
              MethodDeclList RESULT =null;
		int mthlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mthlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDeclList mthl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = mthl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecl ::= Type Identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(type, id, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDeclList ::= VarDeclList VarDecl 
            {
              VarDeclList RESULT =null;
		int vadlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vadlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclList vadl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vardright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl vard = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vadl.addElement(vard); RESULT = vadl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDeclList ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ClassDeclSimple ::= CLASS Identifier LBRACE VarDeclList MethodDeclList RBRACE 
            {
              ClassDeclSimple RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList varl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mthlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mthlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDeclList mthl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ClassDeclSimple(id1, varl, mthl, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclSimple",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassDeclExtends ::= CLASS Identifier EXTENDS Identifier LBRACE VarDeclList MethodDeclList RBRACE 
            {
              ClassDeclExtends RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList varl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mthlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mthlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDeclList mthl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ClassDeclExtends(id1, id2, varl, mthl, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclExtends",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassDecl ::= ClassDeclSimple 
            {
              ClassDecl RESULT =null;
		int classdeclsimplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int classdeclsimplright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDeclSimple classdeclsimpl = (ClassDeclSimple)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = classdeclsimpl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassDecl ::= ClassDeclExtends 
            {
              ClassDecl RESULT =null;
		int classdeclextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int classdeclextright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDeclExtends classdeclext = (ClassDeclExtends)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = classdeclext; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassDeclList ::= 
            {
              ClassDeclList RESULT =null;
		 RESULT = new ClassDeclList(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClassDeclList ::= ClassDecl ClassDeclList 
            {
              ClassDeclList RESULT =null;
		int cladleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cladright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassDecl clad = (ClassDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cldlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cldlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDeclList cldl = (ClassDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cldl.addElement(clad); RESULT = cldl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK Identifier RPAREN LBRACE Statement RBRACE RBRACE 
            {
              MainClass RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new MainClass(id1, id2, stmt, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainClass",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Goal ::= MainClass ClassDeclList 
            {
              Program RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MainClass main = (MainClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cldlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cldlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDeclList cldl = (ClassDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(main, cldl, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Goal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


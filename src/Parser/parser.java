
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 18 20:57:41 GMT-03:00 2017
//----------------------------------------------------

package Parser;

import Throwables.*;
import AST.*;
import java.util.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 18 20:57:41 GMT-03:00 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\004\000\002\025" +
    "\023\000\002\031\004\000\002\031\002\000\002\030\003" +
    "\000\002\030\003\000\002\026\012\000\002\027\010\000" +
    "\002\021\004\000\002\021\002\000\002\020\005\000\002" +
    "\017\004\000\002\017\002\000\002\014\017\000\002\023" +
    "\004\000\002\023\002\000\002\024\005\000\002\024\002" +
    "\000\002\022\004\000\002\013\005\000\002\013\003\000" +
    "\002\013\003\000\002\004\004\000\002\004\002\000\002" +
    "\003\006\000\002\003\003\000\002\003\011\000\002\003" +
    "\007\000\002\003\007\000\002\003\011\000\002\003\005" +
    "\000\002\007\002\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\007\000\002\007\006" +
    "\000\002\007\004\000\002\007\005\000\002\007\003\000" +
    "\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\004\005\006\001\002\000\004\002\206\001" +
    "\002\000\006\002\ufffd\005\133\001\002\000\004\047\007" +
    "\001\002\000\040\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\044\uffd1\045\uffd1\046\uffd1\001\002\000\004\042" +
    "\011\001\002\000\004\006\012\001\002\000\004\007\013" +
    "\001\002\000\004\010\014\001\002\000\004\011\015\001" +
    "\002\000\004\037\016\001\002\000\004\012\017\001\002" +
    "\000\004\044\020\001\002\000\004\045\021\001\002\000" +
    "\004\047\007\001\002\000\004\040\023\001\002\000\004" +
    "\042\024\001\002\000\014\015\032\017\031\020\027\042" +
    "\025\047\007\001\002\000\016\015\032\017\031\020\027" +
    "\042\025\043\uffe9\047\007\001\002\000\004\043\121\001" +
    "\002\000\004\037\115\001\002\000\022\004\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\042\uffe7\043\uffe7\047\uffe7\001" +
    "\002\000\004\037\111\001\002\000\004\037\103\001\002" +
    "\000\006\030\035\044\034\001\002\000\040\022\040\023" +
    "\043\024\044\025\037\027\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\045\037\046\045\uffe1\047\007\050" +
    "\036\001\002\000\040\022\040\023\043\024\044\025\037" +
    "\027\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\045\037\046\041\uffe1\047\007\050\036\001\002\000\024" +
    "\027\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\040" +
    "\uffda\041\uffda\045\uffda\001\002\000\006\013\067\047\007" +
    "\001\002\000\024\027\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\040\uffd9\041\uffd9\045\uffd9\001\002\000\024" +
    "\027\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\040" +
    "\uffd2\041\uffd2\045\uffd2\001\002\000\020\027\053\031\055" +
    "\032\052\033\054\034\056\035\050\041\066\001\002\000" +
    "\024\027\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\040\uffd8\041\uffd8\045\uffd8\001\002\000\024\027\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\040\uffd7\041\uffd7" +
    "\045\uffd7\001\002\000\044\022\040\023\043\024\044\025" +
    "\037\027\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\045\037\046\040\uffe1\041\uffe1\045\uffe1\047\007\050" +
    "\036\001\002\000\040\022\040\023\043\024\044\025\037" +
    "\027\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\045\037\046\040\uffe1\047\007\050\036\001\002\000\020" +
    "\027\053\031\055\032\052\033\054\034\056\035\050\040" +
    "\051\001\002\000\004\021\064\001\002\000\024\027\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\040\uffd3\041" +
    "\uffd3\045\uffd3\001\002\000\044\022\040\023\043\024\044" +
    "\025\037\027\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\036\045\037\046\040\uffe1\041\uffe1\045\uffe1\047\007" +
    "\050\036\001\002\000\044\022\040\023\043\024\044\025" +
    "\037\027\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\045\037\046\040\uffe1\041\uffe1\045\uffe1\047\007\050" +
    "\036\001\002\000\044\022\040\023\043\024\044\025\037" +
    "\027\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\045\037\046\040\uffe1\041\uffe1\045\uffe1\047\007\050\036" +
    "\001\002\000\044\022\040\023\043\024\044\025\037\027" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\045" +
    "\037\046\040\uffe1\041\uffe1\045\uffe1\047\007\050\036\001" +
    "\002\000\044\022\040\023\043\024\044\025\037\027\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\045\037" +
    "\046\040\uffe1\041\uffe1\045\uffe1\047\007\050\036\001\002" +
    "\000\024\027\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\040\uffdf\041\uffdf\045\uffdf\001\002\000\024\027\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\040\uffdd\041" +
    "\uffdd\045\uffdd\001\002\000\024\027\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\040\uffde\041\uffde\045\uffde\001" +
    "\002\000\024\027\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\040\uffe0\041\uffe0\045\uffe0\001\002\000\024\027" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\040\uffdc" +
    "\041\uffdc\045\uffdc\001\002\000\024\027\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\040\uffdb\041\uffdb\045\uffdb" +
    "\001\002\000\024\027\053\031\055\032\052\033\054\034" +
    "\056\035\050\040\uffd4\041\uffd4\045\uffd4\001\002\000\022" +
    "\004\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\042\uffe8\043" +
    "\uffe8\047\uffe8\001\002\000\004\044\073\001\002\000\004" +
    "\037\071\001\002\000\004\040\072\001\002\000\024\027" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\040\uffd5" +
    "\041\uffd5\045\uffd5\001\002\000\040\022\040\023\043\024" +
    "\044\025\037\027\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\045\037\046\045\uffe1\047\007\050\036\001" +
    "\002\000\020\027\053\031\055\032\052\033\054\034\056" +
    "\035\050\045\075\001\002\000\024\027\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\040\uffd6\041\uffd6\045\uffd6" +
    "\001\002\000\020\027\053\031\055\032\052\033\054\034" +
    "\056\035\050\045\077\001\002\000\004\030\100\001\002" +
    "\000\040\022\040\023\043\024\044\025\037\027\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\045\037\046" +
    "\041\uffe1\047\007\050\036\001\002\000\020\027\053\031" +
    "\055\032\052\033\054\034\056\035\050\041\102\001\002" +
    "\000\022\004\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\042" +
    "\uffe6\043\uffe6\047\uffe6\001\002\000\040\022\040\023\043" +
    "\024\044\025\037\027\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\036\045\037\046\040\uffe1\047\007\050\036" +
    "\001\002\000\020\027\053\031\055\032\052\033\054\034" +
    "\056\035\050\040\105\001\002\000\014\015\032\017\031" +
    "\020\027\042\025\047\007\001\002\000\004\016\107\001" +
    "\002\000\014\015\032\017\031\020\027\042\025\047\007" +
    "\001\002\000\022\004\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\042\uffe3\043\uffe3\047\uffe3\001\002\000\040\022\040" +
    "\023\043\024\044\025\037\027\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\045\037\046\040\uffe1\047\007" +
    "\050\036\001\002\000\020\027\053\031\055\032\052\033" +
    "\054\034\056\035\050\040\113\001\002\000\014\015\032" +
    "\017\031\020\027\042\025\047\007\001\002\000\022\004" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\042\uffe4\043\uffe4" +
    "\047\uffe4\001\002\000\040\022\040\023\043\024\044\025" +
    "\037\027\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\045\037\046\040\uffe1\047\007\050\036\001\002\000" +
    "\020\027\053\031\055\032\052\033\054\034\056\035\050" +
    "\040\117\001\002\000\004\041\120\001\002\000\022\004" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\042\uffe5\043\uffe5" +
    "\047\uffe5\001\002\000\004\043\122\001\002\000\006\002" +
    "\uffff\005\uffff\001\002\000\004\043\126\001\002\000\020" +
    "\004\uffe9\015\032\017\031\020\027\042\025\043\uffe9\047" +
    "\007\001\002\000\006\004\uffea\043\uffea\001\002\000\022" +
    "\004\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\042\uffe2\043" +
    "\uffe2\047\uffe2\001\002\000\004\002\001\001\002\000\006" +
    "\002\ufffd\005\133\001\002\000\006\002\ufffb\005\ufffb\001" +
    "\002\000\006\002\ufffc\005\ufffc\001\002\000\004\047\007" +
    "\001\002\000\006\026\136\042\135\001\002\000\012\006" +
    "\ufff7\013\141\014\145\043\ufff7\001\002\000\004\047\007" +
    "\001\002\000\004\042\140\001\002\000\012\006\ufff7\013" +
    "\141\014\145\043\ufff7\001\002\000\006\044\200\047\uffeb" +
    "\001\002\000\006\006\153\043\ufff4\001\002\000\004\047" +
    "\007\001\002\000\026\004\ufff7\006\ufff7\013\141\014\145" +
    "\015\ufff7\017\ufff7\020\ufff7\042\ufff7\043\ufff7\047\ufff7\001" +
    "\002\000\004\047\uffec\001\002\000\022\004\ufff8\006\ufff8" +
    "\015\ufff8\017\ufff8\020\ufff8\042\ufff8\043\ufff8\047\ufff8\001" +
    "\002\000\004\041\150\001\002\000\026\004\ufff6\006\ufff6" +
    "\013\ufff6\014\ufff6\015\ufff6\017\ufff6\020\ufff6\042\ufff6\043" +
    "\ufff6\047\ufff6\001\002\000\004\043\177\001\002\000\006" +
    "\006\153\043\ufff4\001\002\000\006\013\141\014\145\001" +
    "\002\000\004\047\007\001\002\000\004\037\156\001\002" +
    "\000\010\013\141\014\145\040\ufff1\001\002\000\004\040" +
    "\166\001\002\000\006\040\uffef\046\uffef\001\002\000\004" +
    "\047\007\001\002\000\006\040\uffee\046\uffee\001\002\000" +
    "\006\040\ufff2\046\164\001\002\000\006\013\141\014\145" +
    "\001\002\000\006\040\ufff0\046\ufff0\001\002\000\004\042" +
    "\167\001\002\000\022\004\ufff7\013\141\014\145\015\ufff7" +
    "\017\ufff7\020\ufff7\042\ufff7\047\ufff7\001\002\000\016\004" +
    "\uffe9\015\032\017\031\020\027\042\025\047\007\001\002" +
    "\000\004\004\172\001\002\000\040\022\040\023\043\024" +
    "\044\025\037\027\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\045\037\046\041\uffe1\047\007\050\036\001" +
    "\002\000\020\027\053\031\055\032\052\033\054\034\056" +
    "\035\050\041\174\001\002\000\004\043\175\001\002\000" +
    "\006\006\ufff3\043\ufff3\001\002\000\004\043\ufff5\001\002" +
    "\000\006\002\ufffa\005\ufffa\001\002\000\004\045\201\001" +
    "\002\000\004\047\uffed\001\002\000\006\006\153\043\ufff4" +
    "\001\002\000\004\043\204\001\002\000\006\002\ufff9\005" +
    "\ufff9\001\002\000\004\002\ufffe\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\006\002\003\025\004\001\001\000\002\001" +
    "\001\000\012\026\131\027\130\030\127\031\126\001\001" +
    "\000\004\011\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\025\006" +
    "\027\011\032\001\001\000\012\003\123\004\122\006\027" +
    "\011\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\075\011\040\001\001\000\006\007" +
    "\041\011\040\001\001\000\002\001\001\000\004\011\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\064" +
    "\011\040\001\001\000\006\007\046\011\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\062\011\040\001\001\000\006\007\061\011\040\001" +
    "\001\000\006\007\060\011\040\001\001\000\006\007\057" +
    "\011\040\001\001\000\006\007\056\011\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\073\011" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\100\011\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\103" +
    "\011\040\001\001\000\002\001\001\000\010\003\105\006" +
    "\027\011\032\001\001\000\002\001\001\000\010\003\107" +
    "\006\027\011\032\001\001\000\002\001\001\000\006\007" +
    "\111\011\040\001\001\000\002\001\001\000\010\003\113" +
    "\006\027\011\032\001\001\000\002\001\001\000\006\007" +
    "\115\011\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\123\004\124\006\027\011\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\026\131\027\130\030\127\031\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\133\001" +
    "\001\000\002\001\001\000\010\013\142\020\143\021\201" +
    "\001\001\000\004\011\136\001\001\000\002\001\001\000" +
    "\010\013\142\020\143\021\141\001\001\000\002\001\001" +
    "\000\006\014\151\017\150\001\001\000\004\011\146\001" +
    "\001\000\010\013\142\020\143\021\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\151\017\175\001\001" +
    "\000\004\013\153\001\001\000\004\011\154\001\001\000" +
    "\002\001\001\000\010\013\160\022\157\023\156\001\001" +
    "\000\002\001\001\000\004\024\162\001\001\000\004\011" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\160\022\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\142\020\143\021\167\001\001\000\012" +
    "\003\123\004\170\006\027\011\032\001\001\000\002\001" +
    "\001\000\006\007\172\011\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\151\017\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(id, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Identifier",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= Identifier 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierExp(id.s,1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expression ::= LPAREN Expression RPAREN 
            {
              Exp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= NOT Expression 
            {
              Exp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(expr, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= NEW Identifier LPAREN RPAREN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new NewObject(id, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= NEW INTEGER LBRACK Expression RBRACK 
            {
              Exp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NewArray(expr, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= THIS 
            {
              Exp RESULT =null;
		int thleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int thright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object th = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new This(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= FALSE 
            {
              Exp RESULT =null;
		int falleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int falright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new False(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= TRUE 
            {
              Exp RESULT =null;
		int truleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int truright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tru = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new True(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= INT 
            {
              Exp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer lit = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerLiteral(lit, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= Expression POINT LENGTH 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayLength(arg1, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression AND Expression 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(arg1, arg2, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Expression LESS Expression 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(arg1, arg2, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= Expression MINUS Expression 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(arg1, arg2, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expression ::= Expression TIMES Expression 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Times(arg1, arg2, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= Expression PLUS Expression 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(arg1, arg2, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expression ::= 
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statement ::= LBRACE StatementList RBRACE 
            {
              Statement RESULT =null;
		int stmlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList stml = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(stml, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= IF LPAREN Expression RPAREN Statement ELSE Statement 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmt1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmt1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement stmt1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmt2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmt2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stmt2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(expr, stmt1, stmt2, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= WHILE LPAREN Expression RPAREN Statement 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(expr, stmt, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= SYSOUT LPAREN Expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(expr, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= Identifier LBRACK Expression RBRACK BECOMES Expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp expr1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp expr2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAssign(id, expr1, expr2, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= ReturnStatement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Return s = (Return)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= Identifier BECOMES Expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assign(id, expr, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // StatementList ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // StatementList ::= Statement StatementList 
            {
              StatementList RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList stml = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 stml.addElement(stmt); RESULT = stml; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= INTEGER 
            {
              Type RESULT =null;
		 RESULT = new IntegerType(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= INTEGER LBRACK RBRACK 
            {
              Type RESULT =null;
		 RESULT = new IntArrayType(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FormalParameter ::= Type Identifier 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Formal(t,id, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameter",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FormalListRest ::= 
            {
              FormalList RESULT =null;
		 RESULT = new FormalList(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalListRest",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FormalListRest ::= FormalListRest COMMA FormalParameter 
            {
              FormalList RESULT =null;
		int forlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int forlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormalList forl = (FormalList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fordleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fordright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formal ford = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 forl.addElement(ford); RESULT = forl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalListRest",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FormalList ::= 
            {
              FormalList RESULT =null;
		 RESULT = new FormalList(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FormalList ::= FormalParameter FormalListRest 
            {
              FormalList RESULT =null;
		int fordleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fordright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formal ford = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalList forl = (FormalList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	FormalList f = new FormalList(1);
							f.addElement(ford);
							for(int i=0; i<forl.size(); i++){
								f.addElement(forl.elementAt(i));
							}
							RESULT = f; 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MethodDecl ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE 
            {
              MethodDecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int forlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int forlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		FormalList forl = (FormalList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int varlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int varlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VarDeclList varl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stmlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stmlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		StatementList stml = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new MethodDecl(type, id, forl, varl, stml, expr, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MethodDeclList ::= 
            {
              MethodDeclList RESULT =null;
		 RESULT = new MethodDeclList(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MethodDeclList ::= MethodDecl MethodDeclList 
            {
              MethodDeclList RESULT =null;
		int mthdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mthdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDecl mthd = (MethodDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mthlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mthlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDeclList mthl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 mthl.addElement(mthd); RESULT = mthl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecl ::= Type Identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(type, id, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDeclList ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDeclList ::= VarDecl VarDeclList 
            {
              VarDeclList RESULT =null;
		int vardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDecl vard = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vadlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vadlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclList vadl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vadl.addElement(vard); RESULT = vadl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ClassDeclSimple ::= CLASS Identifier LBRACE VarDeclList MethodDeclList RBRACE 
            {
              ClassDeclSimple RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList varl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mthlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mthlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDeclList mthl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ClassDeclSimple(id1, varl, mthl, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclSimple",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassDeclExtends ::= CLASS Identifier EXTENDS Identifier LBRACE VarDeclList MethodDeclList RBRACE 
            {
              ClassDeclExtends RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList varl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mthlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mthlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDeclList mthl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ClassDeclExtends(id1, id2, varl, mthl, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclExtends",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassDecl ::= ClassDeclSimple 
            {
              ClassDecl RESULT =null;
		int classdeclsimplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int classdeclsimplright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDeclSimple classdeclsimpl = (ClassDeclSimple)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = classdeclsimpl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassDecl ::= ClassDeclExtends 
            {
              ClassDecl RESULT =null;
		int classdeclextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int classdeclextright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDeclExtends classdeclext = (ClassDeclExtends)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = classdeclext; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassDeclList ::= 
            {
              ClassDeclList RESULT =null;
		 RESULT = new ClassDeclList(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClassDeclList ::= ClassDecl ClassDeclList 
            {
              ClassDeclList RESULT =null;
		int cladleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cladright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassDecl clad = (ClassDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cldlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cldlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDeclList cldl = (ClassDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cldl.addElement(clad); RESULT = cldl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK Identifier RPAREN LBRACE Statement RBRACE RBRACE 
            {
              MainClass RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new MainClass(id1, id2, stmt, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainClass",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Goal ::= MainClass ClassDeclList 
            {
              Program RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MainClass main = (MainClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cldlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cldlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDeclList cldl = (ClassDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(main, cldl, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Goal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


/*
 * CUP specification for the parser for a simple demo language
 * Change this into the parser for your implementation of MiniJava.
 */

package Parser;

import Throwables.*;
import AST.*;
import java.util.*;
import java_cup.runtime.*;


/* Terminals (tokens returned by the scanner) */

/* reserved words: */
terminal RETURN, CLASS, PUBLIC, STATIC, VOID, MAIN, STRING, INTEGER, BOOLEAN, IF, ELSE, WHILE, SYSOUT, LENGTH, TRUE, FALSE, THIS, NEW, EXTENDS;

/* operators: */
terminal PLUS, BECOMES, LESS, AND, NOT, MINUS, TIMES, POINT;

/* delimiters: */
terminal LPAREN, RPAREN, SEMICOLON, LBRACE, RBRACE, LBRACK, RBRACK, COMMA;

/* tokens with values: */
terminal String IDENTIFIER;
terminal Integer INT;

/* Nonterminals */

nonterminal Program Goal;
nonterminal Statement Statement;
nonterminal StatementList StatementList;
nonterminal Return ReturnStatement;
nonterminal Exp Exp;
nonterminal ExpList ExpList;
nonterminal ExpList NoEmptyList;
nonterminal Identifier Identifier;
nonterminal Type Type;
nonterminal MethodDecl MethodDecl;
nonterminal MethodDeclList MethodDeclList;
nonterminal VarDecl VarDecl;
nonterminal VarDeclList VarDeclList;
nonterminal Formal Formal;
nonterminal FormalList FormalList;
nonterminal FormalList NoEmptyFormalList;
nonterminal MainClass MainClass;
nonterminal ClassDeclExtends ClassDeclExtends;
nonterminal ClassDeclSimple ClassDeclSimple;
nonterminal ClassDecl ClassDecl;
nonterminal ClassDeclList ClassDeclList;


/* Precedence declarations */
precedence right BECOMES;
precedence nonassoc NOT;
precedence left AND; 
precedence nonassoc LESS;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left POINT;
precedence left NEW;

/* Productions */
            
Goal ::= 				MainClass:main ClassDeclList:cldl
							{: RESULT = new Program(main, cldl, mainleft); :};


			
MainClass ::= 			CLASS Identifier:id1 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK Identifier:id2 RPAREN LBRACE Statement:stmt RBRACE RBRACE
							{: RESULT = new MainClass(id1, id2, stmt, id1left); :};


				
ClassDeclList ::= 		ClassDeclList:cldl ClassDecl:clad 
					  		{: cldl.addElement(clad); RESULT = cldl; :}

					  	| /*empty*/	
							{: RESULT = new ClassDeclList(0); :};



ClassDecl ::= 			ClassDeclExtends:classdeclext
							{: RESULT = classdeclext; :}

						| ClassDeclSimple:classdeclsimpl
							{: RESULT = classdeclsimpl; :};


						
ClassDeclExtends ::= 	CLASS Identifier:id1 EXTENDS Identifier:id2 LBRACE VarDeclList:varl MethodDeclList:mthl RBRACE			 
							{: RESULT = new ClassDeclExtends(id1, id2, varl, mthl, id1left); :};



ClassDeclSimple ::= 	CLASS Identifier:id1 LBRACE VarDeclList:varl MethodDeclList:mthl RBRACE			 
							{: RESULT = new ClassDeclSimple(id1, varl, mthl, id1left); :};	



VarDeclList ::= 		VarDeclList:vadl VarDecl:vard 
							{: vadl.addElement(vard); RESULT = vadl; :}

						| /*empty*/
							{: RESULT = new VarDeclList(0); :}; 


					            
VarDecl ::= 			Type:type Identifier:id SEMICOLON
							{: RESULT = new VarDecl(type, id, typeleft); :};



MethodDeclList ::= 		MethodDeclList:mthdl MethodDecl:mthd
							{: mthdl.addElement(mthd); RESULT = mthdl; :}

						| /*empty*/
							{: RESULT = new MethodDeclList(0); :};


					
MethodDecl ::= 			PUBLIC Type:type Identifier:id LPAREN FormalList:forl RPAREN LBRACE VarDeclList:varl StatementList:stml RETURN Exp:expr SEMICOLON RBRACE
							{: RESULT = new MethodDecl(type, id, forl, varl, stml, expr, typeleft); :};


						
FormalList ::=  		NoEmptyFormalList:forl 
							{: 	RESULT = forl; :}

					    | /*empty*/	
							{: RESULT = new FormalList(0); :};


						
NoEmptyFormalList ::= 	Formal:f
							{: FormalList forl = new FormalList(fleft); forl.addElement(f); RESULT = forl; :} 
 
						| NoEmptyFormalList:forl COMMA Formal:f
							{: forl.addElement(f); RESULT = forl; :};


						
Formal ::= 				Type:t Identifier:id
							{: RESULT = new Formal(t,id, tleft); :};


						
Type ::=  				INTEGER LBRACK RBRACK 
							{: RESULT = new IntArrayType(0); :}

						| BOOLEAN
							{: RESULT = new BooleanType(0); :}

						| INTEGER
							{: RESULT = new IntegerType(0); :}

						| Identifier:id
							{: RESULT = new IdentifierType(id.s,idleft); :};


		
StatementList ::= 		Statement:stmt StatementList:stml
							{: stml.addElement(stmt); RESULT = stml; :}
						| /*empty*/
							{: RESULT = new StatementList(0); :};


		
Statement   ::= 		Identifier:id BECOMES Exp:expr SEMICOLON
		                    {: RESULT = new Assign(id, expr, exprleft); :}

			            | ReturnStatement:s
			                {: RESULT = s; :}

			            | Identifier:id LBRACK Exp:expr1 RBRACK BECOMES Exp:expr2 SEMICOLON
			            	{: RESULT = new ArrayAssign(id, expr1, expr2, expr1left); :}

			            | SYSOUT LPAREN Exp:expr RPAREN SEMICOLON
			            	{: RESULT = new Print(expr, exprleft); :}

			            | WHILE LPAREN Exp:expr RPAREN Statement:stmt
			            	{: RESULT = new While(expr, stmt, exprleft); :}

			            | IF LPAREN Exp:expr RPAREN Statement:stmt1 ELSE Statement:stmt2
			            	{: RESULT = new If(expr, stmt1, stmt2, exprleft); :}

			            | LBRACE StatementList:stml RBRACE
			            	{: RESULT = new Block(stml, stmlleft); :};


				
Exp    ::= 				Exp:arg1 PLUS Exp:arg2
				            {: RESULT = new Plus(arg1, arg2, arg1left); :}
				            
				        | Exp:arg1 TIMES Exp:arg2
				            {: RESULT = new Times(arg1, arg2, arg1left); :}
				            
				        | Exp:arg1 MINUS Exp:arg2
				            {: RESULT = new Minus(arg1, arg2, arg1left); :}
				            
				        | Exp:arg1 LESS Exp:arg2
				        	{: RESULT = new LessThan(arg1, arg2, arg1left); :}
				        	
				       	| Exp:arg1 AND Exp:arg2
				        	{: RESULT = new And(arg1, arg2, arg1left); :}
				        	
				        | Exp:expr1 LBRACK Exp:expr2 RBRACK
				        	{: RESULT = new ArrayLookup(expr1, expr2, expr1left); :}
				        	
				        | Exp:arg1 POINT LENGTH
				        	{: RESULT = new ArrayLength(arg1, arg1left); :}
				        	
				        | Exp:expr POINT Identifier:id LPAREN ExpList:el RPAREN
							{: RESULT = new Call(expr, id, el, exprleft); :}
								
				       	| INT:lit
				            {: RESULT = new IntegerLiteral(lit, litleft); :}
				            
				        | TRUE:tru
				            {: RESULT = new True(truleft); :}
				            
				       	| FALSE:fal
				            {: RESULT = new False(falleft); :}
				            
				        | Identifier:id 
				        	{: RESULT = new IdentifierExp(id.s,idleft); :}
				            
				        | THIS:th
				        	{: RESULT = new This(thleft); :}
				        	
				        | NEW INTEGER LBRACK Exp:expr RBRACK
				        	{: RESULT = new NewArray(expr, exprleft); :}
				        	
				        | NEW Identifier:id LPAREN RPAREN 
				        	{: RESULT = new NewObject(id, idleft); :}
				        	
				        | NOT Exp:expr
				            {: RESULT = new Not(expr, exprleft); :}
				            
				        | LPAREN Exp:expr RPAREN
				            {: RESULT = expr; :};
            
        
            
Identifier  ::=  		IDENTIFIER:id
	                		{: RESULT = new Identifier(id, idleft); :};


       
        	
ExpList ::=  			NoEmptyList:exprl 
							{: 	RESULT = exprl; :}

						| /*empty*/
							{: RESULT = new ExpList(0); :};


						
NoEmptyList ::=  		Exp:expr 
							{: ExpList exprl = new ExpList(1); exprl.addElement(expr); RESULT = exprl; :}

						| NoEmptyList:exprl COMMA Exp:expr
							{: exprl.addElement(expr); RESULT = exprl; :};
							
		

